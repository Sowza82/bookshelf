import { z } from 'zod'
import { AVAILABLE_GENRES } from './constants'

// Tipagem base que o frontend usar√° para o formul√°rio
const BookFormSchema = z.object({
  // ID √© opcional na cria√ß√£o, mas pode vir na edi√ß√£o
  id: z.string().optional(),

  // T√≠tulo e autor: m√≠nimo de 3 caracteres, trim para remover espa√ßos extras
  title: z.string().trim().min(3, "O t√≠tulo √© obrigat√≥rio e precisa de no m√≠nimo 3 caracteres."),
  author: z.string().trim().min(3, "O nome do autor √© obrigat√≥rio."),

  // ‚úÖ CORRIGIDO: O nome usado no Front-end √© 'year'
  year: z.preprocess(
    (val) => (typeof val === "string" ? Number(val) : val),
    z.number().int().positive("O ano deve ser um n√∫mero inteiro e positivo.")
  ),

  rating: z.preprocess(
    (val) => (typeof val === "string" ? Number(val) : val),
    z.number().min(0, "O rating m√≠nimo √© 0.").max(5, "O rating m√°ximo √© 5.")
  ),

  // G√™nero v√°lido conforme lista
  genre: z.enum(AVAILABLE_GENRES as [string, ...string[]], {
      required_error: "Selecione um g√™nero v√°lido.",
  }),

  // ‚úÖ CORRIGIDO: O nome usado no Front-end √© 'status'
  status: z.enum(["lendo", "lido", "quero-ler"]),

  // ‚úÖ CORRIGIDO: O nome usado no Front-end √© 'description'
  description: z.string().optional().default(''),

  // ‚úÖ CORRIGIDO: O nome usado no Front-end √© 'coverImageUrl'
  coverImageUrl: z.string().optional().refine(
    val => !val || /^https?:\/\/.+/.test(val),
    "A URL da capa deve ser um formato v√°lido."
  ),

  // Adicione p√°ginas, se o seu formul√°rio as usar:
  totalPages: z.preprocess(
    (val) => (typeof val === "string" ? Number(val) : val),
    z.number().int().min(1, "O n√∫mero de p√°ginas deve ser positivo.").optional()
  ),
  currentPage: z.preprocess(
    (val) => (typeof val === "string" ? Number(val) : val),
    z.number().int().min(0, "A p√°gina atual deve ser zero ou mais.").optional()
  ),
})

/**
 * üîπ BOOK_SCHEMA: Schema que o frontend envia, transformado para o formato Prisma.
 */
export const BOOK_SCHEMA = BookFormSchema.transform(data => ({
    // Campos que n√£o mudam
    id: data.id,
    title: data.title,
    author: data.author,
    genre: data.genre,
    rating: data.rating,
    totalPages: data.totalPages,
    currentPage: data.currentPage,

    // ‚úÖ TRANSFORMA√á√ïES para os nomes do Prisma
    publicationYear: data.year,
    readingStatus: data.status,
    synopsis: data.description,
    coverUrl: data.coverImageUrl,

    // Campos adicionais que o Prisma pode esperar (se houver)
    // Exemplo: createdAt: new Date()
}))

// üîπ Vers√£o para cria√ß√£o: requer todos os campos obrigat√≥rios
// Para a cria√ß√£o, usamos o tipo de entrada do formul√°rio, mas tornamos o ID opcional.
export const BOOK_CREATE_SCHEMA = BOOK_SCHEMA

// üîπ Vers√£o para atualiza√ß√£o: todos os campos s√£o opcionais, mas a sa√≠da ainda √© no formato Prisma
export const BOOK_UPDATE_SCHEMA = BookFormSchema.partial().transform(data => ({
    // Campos que n√£o mudam
    id: data.id,
    title: data.title,
    author: data.author,
    genre: data.genre,
    rating: data.rating,
    totalPages: data.totalPages,
    currentPage: data.currentPage,

    // ‚úÖ TRANSFORMA√á√ïES para os nomes do Prisma
    ...(data.year !== undefined && { publicationYear: data.year }),
    ...(data.status !== undefined && { readingStatus: data.status }),
    ...(data.description !== undefined && { synopsis: data.description }),
    ...(data.coverImageUrl !== undefined && { coverUrl: data.coverImageUrl }),

    // Campos que o prisma espera no update, mas o formul√°rio n√£o envia
}))
